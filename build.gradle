plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.170'
    id 'io.freefair.lombok' version '8.4'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = minecraft_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'

            modSource project.sourceSets.main
        }

        client {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

            programArgument '--nogui'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
    maven { url "https://maven.architectury.dev/" }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation 'org.jetbrains:annotations:20.1.0'

    implementation 'top.theillusivec4.curios:curios-neoforge:9.0.9+1.21'

    implementation "it.hurts.octostudios.octolib:octolib-neoforge:0.5.0.1+1.21"

    implementation "dev.architectury:architectury-neoforge:13.0.6"

    implementation "dev.emi:emi-neoforge:1.1.12+1.21"

    if (file("libs").isDirectory()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")

            if (file.name != "desktop.ini") {
                println file.name

                def modartifact = file.name.substring(0, splitPos)
                def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
                def modreference = "lib:$modartifact:$modversion"

                dependencies {
                    implementation (project.dependencies.create(modreference) {
                        transitive = false
                    })
                }
            }
        }
    } else file("libs").mkdir()
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            forge_version          : neoforge_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_authors            : mod_authors
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}